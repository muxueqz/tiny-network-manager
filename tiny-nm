#!/bin/bash
# configure-wifi
#
# Copyright 2018, F123 Consulting, <information@f123.org>
# Copyright 2018, Kyle, <kyle@free2.ml>
# Copyright 2018, Storm Dragon, <storm_dragon@linux-a11y.org>
#
# This is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3, or (at your option) any later
# version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this package; see the file COPYING.  If not, write to the Free
# Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
#--code--

# Some useful settings and functions needed in this configurator

export dialog=dialog
export WORK_DIR=`dirname $0`
# Setup for gettext localization
export TEXTDOMAIN=configure-wifi
export TEXTDOMAINDIR=/usr/share/locale
. gettext.sh

# Get the coluns and lines of the "screen"
cols=$(tput cols)
lines=$(tput lines)
# Settings to improve accessibility of dialog.
export DIALOGOPTS='--insecure --no-lines --visit-items'

passwordbox() {
    # Returns: text entered by the user
    # Args 1, Instructions for box.
    # args: 2 initial text (optional)
    $dialog --backtitle "$(gettext "Enter text and press enter. Press escape to cancel.")" \
        --passwordbox "$1" $((lines - 4)) $cols "$2" --stdout
}

msgbox() {
# Returns: None
# Shows the provided message on the screen with an ok button.
$dialog --msgbox "$*" $lines $cols
}

infobox() {
# Returns: None
# Shows the provided message on the screen with no buttons.
$dialog --infobox "$*" $lines $cols
}

menulist() {
    # Args: minimum group 2, multiples of 2, "tag" "choice"
    # returns: selected tag
      local menuList
    if [[ $((${#@} / 2)) -gt $((lines - 5)) ]]; then
        local optionSize=$((lines - 5))
    else
        local optionSize=$((${#@} / 2))
    fi
    ifs="$IFS"
    IFS=$'\n'
    $dialog --backtitle "$(gettext "Use the up and down arrow keys to find the option you want, then press enter to select it. Press escape to cancel.")" \
        --menu "$(gettext "Please select your wireless network")" $((lines - 4)) $cols $optionSize $@ --stdout
    IFS="$ifs"
}

make_cfg() {
if test -z $pass; then
	cat > ${WPA_CFG_FILE} <<-endOfFile
		network={
		    ssid="$network"
		    key_mgmt="NONE"
		}
	endOfFile
else
	wpa_passphrase "$network" "$pass" | grep -v \#psk > ${WPA_CFG_FILE}
fi
}

# Be sure the wireless interface is up.
ip link set up dev wlan0

# Scan for available wifi networks and store them in an array.
infobox "$(gettext "Scanning for available wireless networks ...")"
ifs=$IFS
IFS=$'\n'
for ESSID in $(iwlist wlan0 scan | grep ESSID | cut -d\" -f2); do
    ESSID=`echo -e ${ESSID}`
	networks+=("$ESSID")
	networks+=(" ")
done
IFS=$ifs

# Present the available networks in a selectable menu, only if networks can be found
if test -z "$networks"; then
	msgbox "$(gettext "Unable to get a list of networks. Either you have no wireless networks in range or there is a problem with your wireless adapter.")"
	exit 0
else
	network="$(menulist "${networks[@]}")"
fi
test -z "$network" && exit 0

# Configure wpa_supplicant
mkdir -p ${WORK_DIR}/wpa_supplicant

# Combine the network ESSID and password to add a Network section to the wpa_supplicant configuration file with an encrypted password,
# or if no password is specified, add a Network section with no key management.
WPA_CFG_FILE=${WORK_DIR}/wpa_supplicant/`echo ${ESSID} | md5sum | cut -d' ' -f1`.conf
echo $WPA_CFG_FILE
if [[ ! -r ${WPA_CFG_FILE} ]] ; then
    pass="$(passwordbox "$(eval_gettext "Enter the password for \${network}. Just press the enter key if \$network is unsecured.")")" || exit 0
    make_cfg ${WPA_CFG_FILE}
fi

infobox "$(eval_gettext "Connecting to \${network}...")"


killall wpa_supplicant
wpa_supplicant -i wlan0 -c ${WPA_CFG_FILE} -B

for testconn in {1..3}; do
    udhcpc -i wlan0
	sleep 1
done

# Detect a connection. Timeout after 10 seconds if the connection is not detected.
for testconn in {1..10}; do
	ping -c1 g.cn >& /dev/null && connected=1 && break
	sleep 1
done
test $connected && msgbox "$(gettext "Your wireless network connection has been configured and is now working.")" ||msgbox "$(gettext "There was a problem configuring the wireless network. Be sure you selected the correct network, and that your password is correct.")"
